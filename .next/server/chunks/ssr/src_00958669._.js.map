{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/label.tsx"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n"],"names":[],"mappings":";;;;AAEA;AACA;AACA;AAEA;AANA;;;;;;AAQA,MAAM,gBAAgB,CAAA,GAAA,gKAAA,CAAA,MAAG,AAAD,EACtB;AAGF,MAAM,sBAAQ,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAI3B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC,iKAAA,CAAA,OAAmB;QAClB,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,iBAAiB;QAC9B,GAAG,KAAK;;;;;;AAGb,MAAM,WAAW,GAAG,iKAAA,CAAA,OAAmB,CAAC,WAAW","debugId":null}},
    {"offset": {"line": 39, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/form.tsx"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 192, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/textarea.tsx"],"sourcesContent":["import * as React from 'react';\n\nimport {cn} from '@/lib/utils';\n\nconst Textarea = React.forwardRef<HTMLTextAreaElement, React.ComponentProps<'textarea'>>(\n  ({className, ...props}, ref) => {\n    return (\n      <textarea\n        className={cn(\n          'flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm',\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    );\n  }\n);\nTextarea.displayName = 'Textarea';\n\nexport {Textarea};\n"],"names":[],"mappings":";;;;AAAA;AAEA;;;;AAEA,MAAM,yBAAW,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAC9B,CAAC,EAAC,SAAS,EAAE,GAAG,OAAM,EAAE;IACtB,qBACE,8OAAC;QACC,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,qTACA;QAEF,KAAK;QACJ,GAAG,KAAK;;;;;;AAGf;AAEF,SAAS,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 220, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/card.tsx"],"sourcesContent":["import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n"],"names":[],"mappings":";;;;;;;;;AAAA;AAEA;;;;AAEA,MAAM,qBAAO,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAG1B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,4DACA;QAED,GAAG,KAAK;;;;;;AAGb,KAAK,WAAW,GAAG;AAEnB,MAAM,2BAAa,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGhC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;QAC9C,GAAG,KAAK;;;;;;AAGb,WAAW,WAAW,GAAG;AAEzB,MAAM,0BAAY,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAG/B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,sDACA;QAED,GAAG,KAAK;;;;;;AAGb,UAAU,WAAW,GAAG;AAExB,MAAM,gCAAkB,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGrC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;QAC9C,GAAG,KAAK;;;;;;AAGb,gBAAgB,WAAW,GAAG;AAE9B,MAAM,4BAAc,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGjC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QAAI,KAAK;QAAK,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,YAAY;QAAa,GAAG,KAAK;;;;;;AAEhE,YAAY,WAAW,GAAG;AAE1B,MAAM,2BAAa,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGhC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,8BAA8B;QAC3C,GAAG,KAAK;;;;;;AAGb,WAAW,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 301, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/flows/ai-sentiment-analysis.ts"],"sourcesContent":["'use server';\n\n/**\n * @fileOverview Performs AI-driven sentiment analysis on tourist feedback.\n *\n * - analyzeSentiment - A function that analyzes the sentiment of tourist feedback.\n * - SentimentAnalysisInput - The input type for the analyzeSentiment function.\n * - SentimentAnalysisOutput - The return type for the analyzeSentiment function.\n */\n\nimport {ai} from '@/ai/genkit';\nimport {z} from 'genkit';\n\nconst SentimentAnalysisInputSchema = z.object({\n  feedback: z\n    .string()\n    .describe('The feedback text provided by a tourist.'),\n});\nexport type SentimentAnalysisInput = z.infer<typeof SentimentAnalysisInputSchema>;\n\nconst SentimentAnalysisOutputSchema = z.object({\n  sentiment: z\n    .string()\n    .describe('The overall sentiment expressed in the feedback (e.g., positive, negative, neutral).'),\n  positiveKeywords: z\n    .array(z.string())\n    .describe('Keywords or phrases indicating positive sentiment.'),\n  negativeKeywords: z\n    .array(z.string())\n    .describe('Keywords or phrases indicating negative sentiment.'),\n  suggestions: z\n    .string()\n    .describe('Suggestions for improvement based on the sentiment analysis.'),\n});\nexport type SentimentAnalysisOutput = z.infer<typeof SentimentAnalysisOutputSchema>;\n\nexport async function analyzeSentiment(input: SentimentAnalysisInput): Promise<SentimentAnalysisOutput> {\n  return analyzeSentimentFlow(input);\n}\n\nconst prompt = ai.definePrompt({\n  name: 'sentimentAnalysisPrompt',\n  input: {schema: SentimentAnalysisInputSchema},\n  output: {schema: SentimentAnalysisOutputSchema},\n  prompt: `You are an AI assistant that analyzes tourist feedback to determine the overall sentiment and provide suggestions for improvement.\n\n  Analyze the following feedback:\n  \"\"\"{{feedback}}\"\"\"\n\n  Determine the overall sentiment (positive, negative, or neutral).\n  Identify keywords or phrases that indicate positive and negative sentiment.\n  Provide suggestions for improvement based on the sentiment analysis.\n\n  Output the sentiment, positive keywords, negative keywords, and suggestions in a JSON format.\n  `,\n});\n\nconst analyzeSentimentFlow = ai.defineFlow(\n  {\n    name: 'analyzeSentimentFlow',\n    inputSchema: SentimentAnalysisInputSchema,\n    outputSchema: SentimentAnalysisOutputSchema,\n  },\n  async input => {\n    const {output} = await prompt(input);\n    return output!;\n  }\n);\n"],"names":[],"mappings":";;;;;;IAoCsB,mBAAA,WAAA,GAAA,CAAA,GAAA,sNAAA,CAAA,wBAAA,EAAA,8CAAA,sNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,sNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 314, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/feedback-form.tsx"],"sourcesContent":["\"use client\";\n\nimport { useState } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport * as z from 'zod';\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Loader2, Send, Smile, Frown, Meh, Lightbulb, Badge } from 'lucide-react';\nimport { analyzeSentiment, SentimentAnalysisOutput } from '@/ai/flows/ai-sentiment-analysis';\n\nconst formSchema = z.object({\n  feedback: z.string().min(10, 'Please provide at least 10 characters of feedback.'),\n});\n\nconst SentimentIcon = ({ sentiment }: { sentiment: string }) => {\n    switch (sentiment.toLowerCase()) {\n        case 'positive':\n            return <Smile className=\"h-10 w-10 text-green-500\" />;\n        case 'negative':\n            return <Frown className=\"h-10 w-10 text-red-500\" />;\n        default:\n            return <Meh className=\"h-10 w-10 text-yellow-500\" />;\n    }\n}\n\nexport function FeedbackForm() {\n  const [loading, setLoading] = useState(false);\n  const [result, setResult] = useState<SentimentAnalysisOutput | null>(null);\n  const [error, setError] = useState<string | null>(null);\n\n  const form = useForm<z.infer<typeof formSchema>>({\n    resolver: zodResolver(formSchema),\n    defaultValues: {\n      feedback: '',\n    },\n  });\n\n  async function onSubmit(values: z.infer<typeof formSchema>) {\n    setLoading(true);\n    setResult(null);\n    setError(null);\n    try {\n      const response = await analyzeSentiment(values);\n      setResult(response);\n    } catch (e) {\n      setError('Failed to analyze feedback. Please try again.');\n      console.error(e);\n    } finally {\n      setLoading(false);\n    }\n  }\n\n  return (\n    <>\n      <Card className=\"mt-8\">\n        <CardContent className=\"p-6\">\n          <Form {...form}>\n            <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n              <FormField\n                control={form.control}\n                name=\"feedback\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Your Feedback</FormLabel>\n                    <FormControl>\n                      <Textarea\n                        placeholder=\"Tell us about your experience, what you liked, and what could be improved.\"\n                        rows={6}\n                        {...field}\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <Button type=\"submit\" disabled={loading} className=\"w-full\" size=\"lg\">\n                {loading ? <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" /> : <Send className=\"mr-2 h-4 w-4\" />}\n                Submit Feedback\n              </Button>\n            </form>\n          </Form>\n        </CardContent>\n      </Card>\n\n      {error && (\n        <Card className=\"mt-8 border-destructive\">\n            <CardHeader>\n                <CardTitle className=\"text-destructive\">Error</CardTitle>\n                <CardDescription>{error}</CardDescription>\n            </CardHeader>\n        </Card>\n      )}\n\n      {result && (\n        <div className=\"mt-8 space-y-6\">\n            <h2 className=\"text-3xl font-bold text-center font-headline\">Feedback Analysis</h2>\n             <Card>\n                <CardHeader>\n                    <div className=\"flex items-center gap-4\">\n                        <SentimentIcon sentiment={result.sentiment} />\n                        <div>\n                            <CardTitle>Overall Sentiment</CardTitle>\n                            <p className=\"text-3xl font-bold capitalize\">{result.sentiment}</p>\n                        </div>\n                    </div>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                    <div>\n                        <h4 className=\"font-semibold mb-2\">Positive Keywords</h4>\n                        <div className=\"flex flex-wrap gap-2\">\n                            {result.positiveKeywords.length > 0 ? result.positiveKeywords.map(kw => (\n                                <Badge key={kw} variant=\"default\" className=\"bg-green-100 text-green-800\">{kw}</Badge>\n                            )) : <p className=\"text-sm text-muted-foreground\">None identified.</p>}\n                        </div>\n                    </div>\n                     <div>\n                        <h4 className=\"font-semibold mb-2\">Negative Keywords</h4>\n                        <div className=\"flex flex-wrap gap-2\">\n                            {result.negativeKeywords.length > 0 ? result.negativeKeywords.map(kw => (\n                                <Badge key={kw} variant=\"destructive\" className=\"bg-red-100 text-red-800\">{kw}</Badge>\n                            )) : <p className=\"text-sm text-muted-foreground\">None identified.</p>}\n                        </div>\n                    </div>\n                </CardContent>\n            </Card>\n\n            <Card>\n                <CardHeader>\n                    <CardTitle className=\"flex items-center gap-2\"><Lightbulb className=\"text-primary\"/> Suggestions for Improvement</CardTitle>\n                </CardHeader>\n                <CardContent>\n                    <p className=\"text-muted-foreground\">{result.suggestions}</p>\n                </CardContent>\n            </Card>\n        </div>\n      )}\n    </>\n  );\n}\n"],"names":[],"mappings":"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","debugId":null}}]
}