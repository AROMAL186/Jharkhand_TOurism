{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 223, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/genkit.ts"],"sourcesContent":["import {genkit} from 'genkit';\nimport {googleAI} from '@genkit-ai/googleai';\n\nexport const ai = genkit({\n  plugins: [googleAI()],\n  model: 'googleai/gemini-2.5-flash',\n});\n"],"names":[],"mappings":";;;AAAA;AAAA;AACA;AAAA;;;AAEO,MAAM,KAAK,CAAA,GAAA,uIAAA,CAAA,SAAM,AAAD,EAAE;IACvB,SAAS;QAAC,CAAA,GAAA,2KAAA,CAAA,WAAQ,AAAD;KAAI;IACrB,OAAO;AACT","debugId":null}},
    {"offset": {"line": 244, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/flows/personalized-itinerary.ts"],"sourcesContent":["\n'use server';\n\n/**\n * @fileOverview Generates personalized travel itineraries for tourists in Jharkhand based on their interests, preferences, and available time.\n *\n * - generatePersonalizedItinerary - A function that generates a personalized travel itinerary.\n * - PersonalizedItineraryInput - The input type for the generatePersonalizedItinerary function.\n * - PersonalizedItineraryOutput - The return type for the generatePersonalizedItinerary function.\n */\n\nimport {ai} from '@/ai/genkit';\nimport {z} from 'genkit';\n\nconst PersonalizedItineraryInputSchema = z.object({\n  interests: z\n    .string()\n    .describe('The interests of the tourist, such as eco-tourism, cultural sites, historical landmarks, or adventure activities.'),\n  preferences: z\n    .string()\n    .describe('The preferences of the tourist, such as budget, accommodation type, food preferences, and travel style.'),\n  availableTime: z\n    .string()\n    .describe('The available time the tourist has for the trip, specified in days or hours.'),\n  locationPreferences: z.string().describe('Preferred locations or regions within Jharkhand, if any.'),\n  pace: z.string().describe('Desired pace of the itinerary (e.g., relaxed, moderate, packed).'),\n});\nexport type PersonalizedItineraryInput = z.infer<\n  typeof PersonalizedItineraryInputSchema\n>;\n\nconst ItineraryActivitySchema = z.object({\n    time: z.string().describe(\"The time of day for the activity (e.g., Morning, Late Morning, Afternoon, Evening).\"),\n    location: z.string().describe(\"The name of the location or destination for the activity.\"),\n    description: z.string().describe(\"A short description of the activity to be performed.\")\n});\n\nconst ItineraryDaySchema = z.object({\n    day: z.number().describe(\"The day number of the itinerary (e.g., 1, 2, 3).\"),\n    title: z.string().describe(\"A catchy title for the day's plan.\"),\n    activities: z.array(ItineraryActivitySchema).describe(\"A list of activities for the day.\")\n});\n\n\nconst PersonalizedItineraryOutputSchema = z.object({\n  itinerary: z.array(ItineraryDaySchema).describe(\"A day-by-day, detailed travel itinerary for the tourist.\"),\n  overallTheme: z.string().describe('A short summary of the overall theme of the itinerary.'),\n  estimatedCost: z\n    .string()\n    .describe('An estimated cost for the entire itinerary, including transportation, accommodation, and activities.'),\n});\nexport type PersonalizedItineraryOutput = z.infer<\n  typeof PersonalizedItineraryOutputSchema\n>;\n\nexport async function generatePersonalizedItinerary(\n  input: PersonalizedItineraryInput\n): Promise<PersonalizedItineraryOutput> {\n  return personalizedItineraryFlow(input);\n}\n\nconst prompt = ai.definePrompt({\n  name: 'personalizedItineraryPrompt',\n  input: {schema: PersonalizedItineraryInputSchema},\n  output: {schema: PersonalizedItineraryOutputSchema},\n  prompt: `You are an expert travel planner specializing in Jharkhand tourism.\n\n  Based on the tourist's interests, preferences, and available time, create a personalized travel itinerary for exploring Jharkhand's eco and cultural tourism spots.\n\n  Interests: {{{interests}}}\n  Preferences: {{{preferences}}}\n  Available Time: {{{availableTime}}}\n  Location Preferences: {{{locationPreferences}}}\n  Pace: {{{pace}}}\n\n  Provide a detailed, day-by-day itinerary. For each day, provide a title and a list of activities. Each activity should have a time (like Morning, Afternoon), a location, and a description.\n  Also, provide a short summary of the overall theme of the itinerary and an estimated cost for the entire trip.\n  If no location preferences provided, focus on the most popular tourism locations.`,\n});\n\nconst personalizedItineraryFlow = ai.defineFlow(\n  {\n    name: 'personalizedItineraryFlow',\n    inputSchema: PersonalizedItineraryInputSchema,\n    outputSchema: PersonalizedItineraryOutputSchema,\n  },\n  async input => {\n    const {output} = await prompt(input);\n    return output!;\n  }\n);\n\n    \n"],"names":[],"mappings":";;;;;AAGA;;;;;;CAMC,GAED;AACA;AAAA;;;;;;AAEA,MAAM,mCAAmC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAChD,WAAW,uIAAA,CAAA,IAAC,CACT,MAAM,GACN,QAAQ,CAAC;IACZ,aAAa,uIAAA,CAAA,IAAC,CACX,MAAM,GACN,QAAQ,CAAC;IACZ,eAAe,uIAAA,CAAA,IAAC,CACb,MAAM,GACN,QAAQ,CAAC;IACZ,qBAAqB,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IACzC,MAAM,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AAC5B;AAKA,MAAM,0BAA0B,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACrC,MAAM,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC1B,UAAU,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC9B,aAAa,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AACrC;AAEA,MAAM,qBAAqB,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAChC,KAAK,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IACzB,OAAO,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC3B,YAAY,uIAAA,CAAA,IAAC,CAAC,KAAK,CAAC,yBAAyB,QAAQ,CAAC;AAC1D;AAGA,MAAM,oCAAoC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACjD,WAAW,uIAAA,CAAA,IAAC,CAAC,KAAK,CAAC,oBAAoB,QAAQ,CAAC;IAChD,cAAc,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAClC,eAAe,uIAAA,CAAA,IAAC,CACb,MAAM,GACN,QAAQ,CAAC;AACd;AAKO,eAAe,8BACpB,KAAiC;IAEjC,OAAO,0BAA0B;AACnC;AAEA,MAAM,SAAS,mHAAA,CAAA,KAAE,CAAC,YAAY,CAAC;IAC7B,MAAM;IACN,OAAO;QAAC,QAAQ;IAAgC;IAChD,QAAQ;QAAC,QAAQ;IAAiC;IAClD,QAAQ,CAAC;;;;;;;;;;;;mFAYwE,CAAC;AACpF;AAEA,MAAM,4BAA4B,mHAAA,CAAA,KAAE,CAAC,UAAU,CAC7C;IACE,MAAM;IACN,aAAa;IACb,cAAc;AAChB,GACA,OAAM;IACJ,MAAM,EAAC,MAAM,EAAC,GAAG,MAAM,OAAO;IAC9B,OAAO;AACT;;;IAlCoB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 329, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/.next-internal/server/app/%28main%29/itinerary/page/actions.js%20%28server%20actions%20loader%29"],"sourcesContent":["export {generatePersonalizedItinerary as '40a584cdd5e558a6e7e0ad1b4006b772f08ffabedd'} from 'ACTIONS_MODULE0'\n"],"names":[],"mappings":";AAAA","debugId":null}},
    {"offset": {"line": 387, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/itinerary-form.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport const ItineraryForm = registerClientReference(\n    function() { throw new Error(\"Attempted to call ItineraryForm() from the server but ItineraryForm is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/components/itinerary-form.tsx <module evaluation>\",\n    \"ItineraryForm\",\n);\n"],"names":[],"mappings":";;;AAAA;;AACO,MAAM,gBAAgB,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EAC/C;IAAa,MAAM,IAAI,MAAM;AAA0O,GACvQ,mEACA","debugId":null}},
    {"offset": {"line": 401, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/itinerary-form.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport const ItineraryForm = registerClientReference(\n    function() { throw new Error(\"Attempted to call ItineraryForm() from the server but ItineraryForm is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/components/itinerary-form.tsx\",\n    \"ItineraryForm\",\n);\n"],"names":[],"mappings":";;;AAAA;;AACO,MAAM,gBAAgB,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EAC/C;IAAa,MAAM,IAAI,MAAM;AAA0O,GACvQ,+CACA","debugId":null}},
    {"offset": {"line": 415, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 425, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/lib/utils.ts"],"sourcesContent":["import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n"],"names":[],"mappings":";;;AAAA;AACA;;;AAEO,SAAS,GAAG,GAAG,MAAoB;IACxC,OAAO,CAAA,GAAA,2JAAA,CAAA,UAAO,AAAD,EAAE,CAAA,GAAA,qIAAA,CAAA,OAAI,AAAD,EAAE;AACtB","debugId":null}},
    {"offset": {"line": 441, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/card.tsx"],"sourcesContent":["import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n"],"names":[],"mappings":";;;;;;;;;AAAA;AAEA;;;;AAEA,MAAM,qBAAO,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAG1B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,4DACA;QAED,GAAG,KAAK;;;;;;AAGb,KAAK,WAAW,GAAG;AAEnB,MAAM,2BAAa,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGhC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;QAC9C,GAAG,KAAK;;;;;;AAGb,WAAW,WAAW,GAAG;AAEzB,MAAM,0BAAY,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAG/B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,sDACA;QAED,GAAG,KAAK;;;;;;AAGb,UAAU,WAAW,GAAG;AAExB,MAAM,gCAAkB,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGrC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;QAC9C,GAAG,KAAK;;;;;;AAGb,gBAAgB,WAAW,GAAG;AAE9B,MAAM,4BAAc,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGjC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QAAI,KAAK;QAAK,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,YAAY;QAAa,GAAG,KAAK;;;;;;AAEhE,YAAY,WAAW,GAAG;AAE1B,MAAM,2BAAa,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGhC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,8BAA8B;QAC3C,GAAG,KAAK;;;;;;AAGb,WAAW,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 522, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/%28main%29/itinerary/page.tsx"],"sourcesContent":["import { ItineraryForm } from '@/components/itinerary-form';\nimport { Card, CardHeader, CardTitle, CardDescription } from '@/components/ui/card';\nimport { ClipboardList } from 'lucide-react';\n\nexport default function ItineraryPage() {\n  return (\n    <div className=\"container mx-auto max-w-4xl\">\n      <Card className=\"border-none shadow-none\">\n        <CardHeader className=\"text-center\">\n          <div className=\"mx-auto bg-primary/10 p-3 rounded-full w-fit mb-4\">\n             <ClipboardList className=\"h-8 w-8 text-primary\" />\n          </div>\n          <CardTitle className=\"text-3xl font-headline font-bold\">Personalized Itinerary Planner</CardTitle>\n          <CardDescription className=\"text-lg\">\n            Let our AI craft the perfect Jharkhand adventure just for you.\n          </CardDescription>\n        </CardHeader>\n      </Card>\n      <ItineraryForm />\n    </div>\n  );\n}\n"],"names":[],"mappings":";;;;AAAA;AACA;AACA;;;;;AAEe,SAAS;IACtB,qBACE,8OAAC;QAAI,WAAU;;0BACb,8OAAC,gIAAA,CAAA,OAAI;gBAAC,WAAU;0BACd,cAAA,8OAAC,gIAAA,CAAA,aAAU;oBAAC,WAAU;;sCACpB,8OAAC;4BAAI,WAAU;sCACZ,cAAA,8OAAC,wNAAA,CAAA,gBAAa;gCAAC,WAAU;;;;;;;;;;;sCAE5B,8OAAC,gIAAA,CAAA,YAAS;4BAAC,WAAU;sCAAmC;;;;;;sCACxD,8OAAC,gIAAA,CAAA,kBAAe;4BAAC,WAAU;sCAAU;;;;;;;;;;;;;;;;;0BAKzC,8OAAC,uIAAA,CAAA,gBAAa;;;;;;;;;;;AAGpB","debugId":null}}]
}